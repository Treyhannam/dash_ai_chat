{"src/lib/components/Body.react.js":{"description":"Body displays chat messages and autoscrolls to the latest message. This scroll information is kept in local storage.\r\n\r\n@component\r\n@param {Object} props - Component props.\r\n@returns {JSX.Element} Rendered ChatWindow component.","displayName":"Body","methods":[],"props":{"id":{"type":{"name":"string"},"required":false,"description":"The ID used to identify this component in Dash callbacks."},"children":{"type":{"name":"node"},"required":false,"description":"Child component to display in the footer."},"messages":{"type":{"name":"arrayOf","value":{"name":"shape","value":{"role":{"name":"string","required":true},"content":{"name":"string","required":true}}}},"required":false,"description":"Open AI messages to be displayed in the chat window.","defaultValue":{"value":"[]","computed":false}},"setProps":{"type":{"name":"func"},"required":false,"description":"Dash-assigned callback that should be called to report property changes\r\nto Dash, to make them available for callbacks."}}},"src/lib/components/DashAiMessenger.react.js":{"description":"ExampleComponent is an example component.\r\nIt takes a property, `label`, and\r\ndisplays it.\r\nIt renders an input with the property `value`\r\nwhich is editable by the user.","displayName":"DashAiMessenger","methods":[],"props":{"id":{"type":{"name":"string"},"required":false,"description":"The ID used to identify this component in Dash callbacks."},"label":{"type":{"name":"string"},"required":true,"description":"A label that will be printed when this component is rendered."},"value":{"type":{"name":"string"},"required":false,"description":"The value displayed in the input."},"setProps":{"type":{"name":"func"},"required":false,"description":"Dash-assigned callback that should be called to report property changes\r\nto Dash, to make them available for callbacks."}}},"src/lib/components/Footer.react.js":{"description":"Footer displays a resizable chat interface with scroll tracking and message submission.\r\n\r\n@component\r\n@param {Object} props - Component props.\r\n@returns {JSX.Element} Rendered Footer component.","displayName":"Footer","methods":[],"props":{"id":{"type":{"name":"string"},"required":false,"description":"The ID used to identify this component in Dash callbacks."},"message":{"type":{"name":"string"},"required":false,"description":"Message submitted by the user."},"disableInput":{"type":{"name":"bool"},"required":false,"description":"True to disable the text input"},"disableSubmit":{"type":{"name":"bool"},"required":false,"description":"True to disable the submit button"},"children":{"type":{"name":"node"},"required":false,"description":"Child component to display in the footer."},"setProps":{"type":{"name":"func"},"required":false,"description":"Dash-assigned callback that should be called to report property changes\r\nto Dash, to make them available for callbacks."}}},"src/lib/components/HeaderMenu.react.js":{"description":"MenuHeader element to display in a chat, adds icon for resizing the window and user options such as resetting the chat\r\n\r\n@component\r\n@returns {JSX.Element} Rendered ChatWindow component.","displayName":"HeaderMenu","methods":[],"props":{"id":{"type":{"name":"string"},"required":false,"description":"The ID used to identify this component in Dash callbacks."},"headerText":{"type":{"name":"string"},"required":false,"description":"What text to display in the header."},"resetClicked":{"type":{"name":"bool"},"required":false,"description":"If the reset button was clicked or not","defaultValue":{"value":"false","computed":false}},"setProps":{"type":{"name":"func"},"required":false,"description":"Dash-assigned callback that should be called to report property changes\r\nto Dash, to make them available for callbacks."}}},"src/lib/components/ResizableWindow.react.js":{"description":"ResizableWindow displays a resizable container for chat content.\r\n\r\n@component\r\n@param {Object} props - Component props.\r\n@param {string} props.id - The ID used to identify this component in Dash callbacks.\r\n@param {Function} props.setProps - Dash-assigned callback to report property changes.\r\n@returns {JSX.Element} A resizable chat container.","displayName":"ResizableWindow","methods":[],"props":{"id":{"type":{"name":"string"},"required":false,"description":"The ID used to identify this component in Dash callbacks."},"children":{"type":{"name":"node"},"required":false,"description":"Child component to display in the footer."},"setProps":{"type":{"name":"func"},"required":false,"description":"Dash-assigned callback that should be called to report property changes\r\nto Dash, to make them available for callbacks."}}},"src/lib/components/Toggle.react.js":{"description":"ChatWindow displays a resizable chat interface with scroll tracking and message submission.\r\n\r\n@component\r\n@param {Object} props - Component props.\r\n@param {Function} props.setProps - Dash callback for updating props.\r\n@param {boolean} props.isVisible - Indicates if the chat window is visible.\r\n@param {Function} props.children - Child component to display when the toggle is active.\r\n@returns {JSX.Element} Rendered ChatWindow component.","displayName":"Toggle","methods":[],"props":{"id":{"type":{"name":"string"},"required":false,"description":"The ID used to identify this component in Dash callbacks."},"children":{"type":{"name":"node"},"required":false,"description":"Child component to display when the toggle is active."},"isVisible":{"type":{"name":"bool"},"required":false,"description":"Indicates of a toggle is visible (True) or closed (False)."},"setProps":{"type":{"name":"func"},"required":false,"description":"Dash-assigned callback that should be called to report property changes\r\nto Dash, to make them available for callbacks."}}}}